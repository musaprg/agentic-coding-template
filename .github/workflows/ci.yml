name: Agentic Coding CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]

# Security: Limit permissions to minimum required
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret scan with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Devcontainer-based testing
  devcontainer-test:
    name: Test in Devcontainer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and run dev container task
        uses: devcontainers/ci@v0.3
        with:
          imageName: agentic-coding-test
          runCmd: |
            # Install dependencies if package files exist
            if [ -f "package.json" ]; then
              echo "üì¶ Installing Node.js dependencies..."
              npm ci
            fi
            
            if [ -f "requirements.txt" ]; then
              echo "üêç Installing Python dependencies..."
              pip install -r requirements.txt
            fi
            
            if [ -f "go.mod" ]; then
              echo "üêπ Installing Go dependencies..."
              go mod download
            fi
            
            if [ -f "Cargo.toml" ]; then
              echo "ü¶Ä Installing Rust dependencies..."
              cargo fetch
            fi
            
            if [ -f "composer.json" ]; then
              echo "üêò Installing PHP dependencies..."
              composer install --no-dev
            fi
            
            # Run tests if test commands exist in Makefile
            if [ -f "Makefile" ]; then
              echo "üß™ Running tests via Makefile..."
              if make -n test >/dev/null 2>&1; then
                make test
              elif make -n check >/dev/null 2>&1; then
                make check
              else
                echo "‚ÑπÔ∏è No test target found in Makefile"
              fi
            fi
            
            # Run language-specific tests
            if [ -f "package.json" ] && command -v npm >/dev/null 2>&1; then
              if npm run test --if-present >/dev/null 2>&1; then
                echo "üß™ Running Node.js tests..."
                npm test
              fi
            fi
            
            if [ -f "requirements.txt" ] && command -v pytest >/dev/null 2>&1; then
              if find . -name "*test*.py" -o -name "test_*" -type f | grep -q .; then
                echo "üß™ Running Python tests..."
                pytest
              fi
            fi
            
            if [ -f "go.mod" ]; then
              echo "üß™ Running Go tests..."
              go test ./...
            fi
            
            if [ -f "Cargo.toml" ]; then
              echo "üß™ Running Rust tests..."
              cargo test
            fi
            
            echo "‚úÖ Devcontainer testing completed successfully!"

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: devcontainer-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
        if: hashFiles('package.json') != ''

      - name: Install dependencies
        run: npm ci
        if: hashFiles('package.json') != ''

      - name: Run ESLint
        run: npm run lint --if-present
        if: hashFiles('package.json') != ''

      - name: Check formatting with Prettier
        run: npm run format:check --if-present
        if: hashFiles('package.json') != ''

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''

      - name: Install Python linting tools
        run: |
          pip install ruff black isort
        if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''

      - name: Run Python linting
        run: |
          ruff check .
          black --check .
          isort --check-only .
        if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''

  # Dependency audit
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Audit Node.js dependencies
        if: hashFiles('package.json') != ''
        run: |
          npx audit-ci --config .audit-ci.json || npx audit-ci --moderate

      - name: Audit Python dependencies
        if: hashFiles('requirements.txt') != ''
        run: |
          pip install pip-audit
          pip-audit -r requirements.txt

      - name: Audit Go dependencies
        if: hashFiles('go.mod') != ''
        run: |
          go mod audit || echo "Go audit not available, using list for basic check"
          go list -m all

  # Branch protection check
  branch-protection:
    name: Branch Protection Check
    runs-on: ubuntu-latest
    needs: [security-scan, devcontainer-test, code-quality, dependency-audit]
    if: github.event_name == 'pull_request'
    steps:
      - name: Check if all tests passed
        run: |
          echo "‚úÖ All security and quality checks passed!"
          echo "üõ°Ô∏è Ready for human review and merge"
          echo "üìã Remember: Human approval is required before merging"